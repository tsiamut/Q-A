[["index.html", "R Q&amp;A 前言", " R Q&amp;A 予堂 前言 在这里，将会汇总一系列 R 语言的常见问题及解答 "],["常见问题.html", "1 常见问题 1.1 安装问题 1.2 package 无法安装的问题", " 1 常见问题 1.1 安装问题 github 上 项目错误被当成pacakge，进行安装 github 上的 package ，会在 README.md 中有明显的提示安装信息： devtools::install_github(&#39;github-name/pkg-name&#39;) 或者是： remotes::install_github(&#39;github-name/pkg-name&#39;) 这样类似的代码，其中 github-name 用以表示当前 github 账户名称，pkg-name 表示当前项目名称。 如果已经提交到 CRAN上，会显示有： install.packages(&#39;pkg-name&#39;) 类似代码 1.2 package 无法安装的问题 产生的原因可能有以下几种： Windows 系统电脑的用户名为中文 用户名中含有空格 R 安装在 C 盘中，导致下载安装时其权限受阻，此时建议 右键以管理员身份启动 RStudio 镜像设置不合理，未采用国内镜像进行下载。 Console 区域输入并运行： chooseCRANmirror() 或者在 RStudio 中进行设置：Tools &gt; Global Options &gt; Packages 中进行设置。 更加推荐的方式是在 Rprofile 中设置镜像网站： options(repos=&quot;https://mirrors.tuna.tsinghua.edu.cn/CRAN&quot;) #options(repos = &quot;https://mirrors.tongji.edu.cn/CRAN&quot; ) 便于启动后，自动更改其镜像设置。镜像选择不合理，容易导致下载速度过慢，以及在部分情况下无法顺利安装。 Windows 系统用户未安装 Rtools 40, 在安装或升级包时，直接选择了编译操作。建议Windows 系统用户在安装 R 的同时，安装 Rtools 安装时常见的 None zero 问题，如 rlang, vctrs 包常有遇见，此时往往需要卸载 rlang 等，选择重新安装。 或者是先彻底删除 0Check 等文件，将出现该问题包的文件彻底删除后，再重新安装或升级。 例如在以下链接中Windows user space issues with installing R packages 讲述了关于因空格问题导致无法安装，以及该作者提出的解决方案。 "],["关于-r-cmd-command.html", "2 关于 R CMD command 2.1 添加环境变量 2.2 cmd 窗口", " 2 关于 R CMD command 事实上，绝大多数用户在日常使用中并不会涉及到 R CMD command 这个工具。相反，目前在包的开发领域，也越来越多地被devtools::check() 所代替。同样地，也有 rcmdcheck 包的出现，这些都在让 R cmd check 逐渐淡出大多数用户的实现。除此以外，你也选择使用rhub 包进行检查。 但从很多问题的解决上来讨论，面向更多的使用者，把R CMD command 的很多知识点讲述清楚，仍是有必要。 除此以外，也涉及到很多基本知识的讲解。 2.1 添加环境变量 首先，对于大多数用户而言，是第一次将 R语言添加到环境变量中来，这里简要地介绍完整的操作步骤： 首先，通过“此电脑”，右键选择“属性”，进入后，弹出下面所示的窗口： 在右侧选择：高级系统设置，进入后： 选择“环境变量” 接着进入： 当前界面中有两个 Path 变量可供修改，读者可以自行选择当前用户名下的变量修改，抑或是系统变量中的 path 修改，点击编辑选项，进入后弹出： 点击新建，随后点击“浏览”，选择当前电脑上 R 语言的安装路径，并继续选择R语言的安装路径下的 bin/x64 文件夹，将其添加到新建项中。随后点击“确定”，返回，并一直返回到起始页面中。 备注内容：关于遗忘R语言的安装路径问题，可以通过： R.home() 查询当前R版本对应的安装路径。 2.2 cmd 窗口 Windows 系统通过 win + R 快捷键(即同时按下 Win 键和 R 键，或者按下 Win 键不放，接着按下 R 键)，打开运行窗口： "],["arrange-list-of-plots.html", "3 arrange list of plots 3.1 list 3.2 plotlist-cowplot", " 3 arrange list of plots 目前 ggplot 绘图系统主要使用的可用于拼图的包有： patchwork， cowplot 等，至于 gridExtra, aplot 我们暂且不谈。 至于具体的入门教程，很显然 patchwork 包的 主页上提供的 Vignettes: Getting started 中已经给出了通俗易懂的方法：使用 “+” 的语法，将 多个 ggplot2 对象进行拼接操作。 除此以外，cowplot 的 Vignettes: Introduction to cowplot 也给出了 plot_grid() 的简单使用方法。 但以上的内容都是针对多个 ggplot2 对象进行操作，事实上，还有另一种情况：列表中包含多个 ggplot2 的对象，这往往主要是采用 for 循环一类批量绘图得到的列表对象，或者是将获得的十余个或几十个变量保存到一个列表中。 其关键在于：列表中的各个元素均为 ggplot2 对象。 这里，我们以 women 数据集为例，汇总散点图和折线图为例，将其保存为变量 p1, 接着重复生成其余7个变量：p2 到 p8 library(ggplot2) p1 &lt;- ggplot(women,aes(height,weight)) + geom_line() + geom_point() p8 &lt;- p7 &lt;- p6 &lt;- p5 &lt;- p4 &lt;- p3 &lt;- p2 &lt;- p1 接着用 patchwork 进行拼图： library(patchwork) paste0(&#39;p&#39;,1:8, collapse = &#39; + &#39;) -&gt; a a ## [1] &quot;p1 + p2 + p3 + p4 + p5 + p6 + p7 + p8&quot; eval(parse(text = a)) + plot_layout(nrow = 2) 变量 a 为字符串格式，采用 paste0() 生成p1到p8 之间以 “+” 相连的字符串，接着使用 eval(parse(text =a))将其运行并在末尾继续使用 “+”语法添加 plot_layout() 语句。 这种方式仅仅局限于如： 许多个变量时的情况，对于列表里的元素操作就不建议如此操作。并且，一次性生成的众多的 ggplot2 对象，大多数情况下变量名都是具有规律性的。而对于混乱且没有统一性的变量名，还是建议老老实实地手动写完进行拼图。 3.1 list 事实上，cowplot 与 patchwork 本身已经支持了 对于list 中众多 ggplot2 对象拼图的语法支持，只是因为大多数自媒体的宣传，且大部分的教程都是完全相同的框架，与 cowplot, patchwork 的 Vignettes 中的内容并无太大区别，都是限于多个对象时的拼图。这很容易让初学者忽略掉包里的其他函数和主函数的重要参数。 解决问题的重要途径是：读文档！ 以 patchwork 为例，阅读文档后，便会注意到：wrap_plots() 函数： wrap_plots() 函数支持将 list 对象用于拼图，至于使用的方法可以参考该函数的示例部分： example(&quot;wrap_plots&quot;) 在这里，针对已有的p1 到 p8 的变量，将其保存到列表中，并用wrap_plots() 进行拼图： p1 &lt;- ggplot(women,aes(height,weight)) + geom_line() + geom_point() p8 &lt;- p7 &lt;- p6 &lt;- p5 &lt;- p4 &lt;- p3 &lt;- p2 &lt;- p1 b &lt;- list(p1,p2,p3,p4,p5,p6,p7,p8) library(patchwork) wrap_plots(b) 但很多人会有疑问，如何批量将多个变量保存到列表中？ 很显然，上面的手动生成列表的方式，对于几十个元素而言，并不高效。对于这个问题，之后的相关章节中会进一步展开讨论。这里暂不叙述。 3.2 plotlist-cowplot 对于 cowplot 包，其主函数plot_grid() 的第二个参数就尤为重要。 ..., plotlist = NULL, ...) plot_grid() 的第二个参数 plotlist 接收list对象，用以拼图。但这个函数并不等同于 patchwork 包中的 wrap_plots() 函数的第一个参数可以同时接收多个对象或者是一个列表对象。因此，需要引起格外重视。 p1 &lt;- ggplot(women,aes(height,weight)) + geom_line() + geom_point() p8 &lt;- p7 &lt;- p6 &lt;- p5 &lt;- p4 &lt;- p3 &lt;- p2 &lt;- p1 b &lt;- list(p1,p2,p3,p4,p5,p6,p7,p8) cowplot::plot_grid(plotlist = b) "],["ggplot2-绘图问题解答.html", "4 ggplot2 绘图问题解答 4.1 条形图绘制的难点", " 4 ggplot2 绘图问题解答 4.1 条形图绘制的难点 这次内容涉及到条形图绘制过程中排序的问题， 首先，我们先来生成一个简单的数据和基本的图像： d1 &lt;- data.frame( x = c(&#39;A&#39;,&#39;A2&#39;,&#39;C&#39;,&#39;B&#39;,&#39;D&#39;,&#39;Z&#39;,&#39;F&#39;,&#39;Y&#39;), y = c(12,30,24,8,18,25,34,28), f = c(&#39;Ba&#39;,&#39;Ba&#39;,&#39;Fu&#39;,&#39;Ba&#39;,&#39;Fu&#39;,&#39;Ba&#39;,&#39;Fu&#39;,&#39;Fu&#39;) ) ggplot(d1,aes(x,y,group = f, fill = f)) + geom_col() 在这里，可以看到条形中底部的变量是按照字母顺序来依次排列：从 A 到 Z. 这显然不是我们想要的结果：一方面要将两组数据分开绘制，另一方面需要将条形从高到底排列。 针对这种，需要考虑的是：将变量x 转为因子，并设置因子的水平。 首先，很多人会想到：使用 forcats 包中的 fct_reorder()函数就可以顺利解决问题。 args(&#39;fct_reorder&#39;) ## function (.f, .x, .fun = median, ..., .desc = FALSE) ## NULL 将变量x 以变量f 作为分类依据，进行排序。 因此有： d1 %&gt;% mutate(x1 = fct_reorder(x,f)) -&gt; d2 d2$x1 ## [1] A A2 C B D Z F Y ## Levels: A A2 B Z C D F Y ggplot(d2,aes(x1,y,group = f, fill = f)) + geom_col() 我们可以看到利用fct_reorder() 将变量x 变为了因子，同时因子的levels 的确是按照变量f来划分先后顺序的。但条形图从左向右看，其高度参差不齐，没有升序或降序的处理。 因此，单纯地利用fct_reorder() 并不能解决问题。 到了这里，很多人会想到另一个函数：fct_reorder2() 其参数如下： args(&#39;fct_reorder2&#39;) ## function (.f, .x, .y, .fun = last2, ..., .desc = TRUE) ## NULL 相比fct_reorder(), 其多出了一个参数：y. 但是真实的效果如何呢？ d1 %&gt;% mutate(x1 = fct_reorder2(x,f,y)) -&gt; d3 d3$x1 ## [1] A A2 C B D Z F Y ## Levels: F A2 Y Z C D A B ggplot(d3,aes(x1,y,group = f, fill = f)) + geom_col() 虽然，条形图从左到右降序排布，但不同颜色的条形混在一起，并没有实现两种不同颜色的条形的分开。 因此，这种方法也不行。那：有的人可能会想到：将```fct_reorder2(x,f,y)中的第二个参数和第三个参数颠倒一下位置： d1 %&gt;% mutate(x1 = fct_reorder2(x,y,f)) -&gt; d4 d4$x1 ## [1] A A2 C B D Z F Y ## Levels: C D F Y A A2 B Z ggplot(d4,aes(x1,y,group = f, fill = f)) + geom_col() 但结果是：条形图并没有按高度排列，仍然是杂乱无章的；如果仔细观察一下x 轴上的刻度标签，就可以看到目前的排列顺序是在组内按首字母顺序排列的，从 A到Z. 这样的话，仍然回到了一开始的效果。 基于以上问题，我能想到的解决办法就是：手动设置因子的水平，但我们仍然需要一个排序结果，通过变量f和y实现对于x 的组内降序排列： 首先，使用到：fct_relevel()函数， 但在此之前，需要获得排序结果： arrange(d1,f,-y)$x -&gt; g g ## [1] &quot;A2&quot; &quot;Z&quot; &quot;A&quot; &quot;B&quot; &quot;F&quot; &quot;Y&quot; &quot;C&quot; &quot;D&quot; dd &lt;- d1 dd$xx &lt;- factor(dd$x,levels = g) dd$xx ## [1] A A2 C B D Z F Y ## Levels: A2 Z A B F Y C D 使用 arrange() 进行降序排列。这样便得到了g, 接着可以使用 factor() 来重新定义levels, 或者你也可以使用fct_relevel(). d1 %&gt;% mutate(x1 = fct_relevel(x,g)) -&gt; d5 紧接着，进入绘图环节： ggplot(dd,aes(xx,y,group = f, fill = f)) + geom_col(width = 0.5) + geom_vline(xintercept = 4.5, linetype = 2) + labs(fill = &#39;&#39;) + theme_bw() + theme(legend.position = c(0.2,0.88)) 以上便是最终效果。 下面进入拓展环节： 我们可以考虑更多的分组情况： 首先是原始数据和最开始的绘图效果： d1 &lt;- data.frame( x = c(&#39;A&#39;,&#39;A2&#39;,&#39;C&#39;,&#39;B&#39;,&#39;D&#39;,&#39;Z&#39;,&#39;F&#39;,&#39;Y&#39;,&#39;GH&#39;), y = c(12,30,24,8,18,25,34,28,39), f = c(&#39;Ba&#39;,&#39;ZH&#39;,&#39;Fu&#39;,&#39;Ba&#39;,&#39;ZH&#39;,&#39;Ba&#39;,&#39;Fu&#39;,&#39;Fu&#39;,&#39;ZH&#39;) ) ggplot(d1,aes(x,y,group = f, fill = f)) + geom_col(width = 0.5) 紧接着是实现最终效果绘制： arrange(d1,f,-y)$x -&gt; g1 d1 %&gt;% mutate(x1 = fct_relevel(x,g1)) -&gt; d6 ggplot(d6,aes(x1,y,group = f, fill = f)) + geom_col(width = 0.5) + labs(fill = &#39;&#39;) + theme_bw() + theme(legend.position = c(0.2,0.85)) "],["environment-variables.html", "5 environment variables 5.1 设置环境变量", " 5 environment variables 5.1 设置环境变量 事实上，在 R 启动时，会执行以及识别 Rprofile 和 Renviron 中的内容。 前者，通常是R代码的设定，例如：加载包，设置 options,以及其他的启动后需自动执行的代码。 后者，是 环境变量的设置。最常见的是：Rtools 安装后，在C盘:文档中存在一个文件：.Renviron其中默认仅有一行内容： PATH=&quot;${RTOOLS40_HOME}\\usr\\bin;${PATH}&quot; 这一行内容，指定了 path 环境变量。 这里，能够明显地得出在 Rprofile 和 Renviron 文件中关于设置环境变量的区别： Rprofile 中需要借助于:Sys.setenv()函数来设置环境变量。而 Renviron 中则是直接用=方式来对环境变量进行赋值。 而默认的 .Renviron 文件中 PATH 变量也是日后用户在使用devtools包后，其函数： library(devtools) ## Loading required package: usethis has_devel() ## Your system is ready to build packages! has_devel()返回信息： Your system is ready to build packages! 的重要保证。 但本节内容的重点并不在于 .Renviron 的使用上，而是关于 R 语言的环境变量设置问题。 关于 Renviron 和 Rprofile ，一方面可以参考 RStudio 官方给出的参考信息, 另一方面，在 stackoverflow上也有类似的回答。 同时，RStudio 网站上也有类似问题的回答：how-to-set-a-variable-in-renviron 因此，这次的重点不再是如何添加和设置环境变量，而是更好地关注各种环境变量本身。 首先，需要查看Sys.setenv()函数的帮助信息：在 See Also 区域的最后一行，可以通过environment variables链接跳转到环境变量信息的详细说明页面中。 这其中最常见的环境变量有： HOME, R_HOME, R_LIBS,R_LIBS_USER,… 除此以外，需要注意 Windows 系统下独有的环境变量有：R_USER 下面，先来一个一个地说明： Sys.setenv(HOME = &#39;D:/&#39;) Sys.getenv(&#39;HOME&#39;) ## [1] &quot;D:/&quot; 可以直接修改 HOME 变量，默认情况下，HOME变量在Windows 系统中指代C 盘文档文件夹，也就是通常所说的： C:/Users/user-name/Documents, 此处的user-name指代不同电脑上具体的用户名称。 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
